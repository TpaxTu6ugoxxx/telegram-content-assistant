import os
import openai
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø AI-–±–æ—Ç –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤ üòä –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –∏ –Ω–∞—á–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞!")

# –ö–æ–º–∞–Ω–¥–∞ /–ø–æ—Å—Ç <—Ç–µ–º–∞>
async def post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic = ' '.join(context.args)
    if not topic:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ç–µ–º—É: /–ø–æ—Å—Ç <—Ç–µ–º–∞>")
        return

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}. –°—Ç–∏–ª—å: Instagram, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π."}
        ]
    )
    await update.message.reply_text(response['choices'][0]['message']['content'])

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("–ø–æ—Å—Ç", post))
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
app.run_polling()
