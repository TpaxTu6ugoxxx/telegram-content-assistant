import os
import openai
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")

# /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç-–±–æ—Ç üòä –ù–∞–ø–∏—à–∏ /–ø–æ—Å—Ç <—Ç–µ–º–∞>, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π.")

# /–ø–æ—Å—Ç <—Ç–µ–º–∞> ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å GPT
async def post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic = ' '.join(context.args)
    if not topic:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /–ø–æ—Å—Ç <—Ç–µ–º–∞>")
        return

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}. –°—Ç–∏–ª—å ‚Äî Instagram, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π."}
        ]
    )

    content = response.choices[0].message.content
    await update.message.reply_text(content)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("–ø–æ—Å—Ç", post))
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
app.run_polling()
