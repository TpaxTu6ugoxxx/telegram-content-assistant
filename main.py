import os
import logging
import openai
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø AI-–∫–æ–Ω—Ç–µ–Ω—Ç –±–æ—Ç. –ù–∞–ø–∏—à–∏ /–ø–æ—Å—Ç <—Ç–µ–º–∞>, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç üí°")

# /–ø–æ—Å—Ç <—Ç–µ–º–∞>
async def post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic = ' '.join(context.args)
    if not topic:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /–ø–æ—Å—Ç <—Ç–µ–º–∞>")
        return

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π Instagram-–ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}"}
        ]
    )

    await update.message.reply_text(response.choices[0].message.content)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("post", post))
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
app.run_polling()
